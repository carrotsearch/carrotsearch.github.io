{"componentChunkName":"component---gatsby-theme-apidocs-templates-documentation-page-js","path":"/code-blocks/","result":{"data":{"site":{"siteMetadata":{"title":"APIdocs documentation","description":"APIdocs is an opinionated Gatsby template for writing technical documentation. Clone, customize and start documenting.","lang":"en","indexAlias":"/hello-apidocs/"}},"html":{"frontmatter":{"id":"code-blocks","title":"Code blocks"},"html":"<article>\n  <h1>Code blocks</h1>\n\n  <p id=\"a5e13d9d\">APIdocs can highlight code blocks in your documentation using Highlight.js.</p>\n\n  <p id=\"535edd26\">\n    To mark a block-level code fragment for highlighting, use the\n    <code>pre</code> tag with the <code>data-language</code> attribute defining\n    the language of the contents. See the\n    <a href=\"https://highlightjs.org/static/demo/\">Highlight.js list of supported languages</a>\n    for the attribute values to use.\n  </p>\n\n  <section id=\"code-blocks:simple\">\n    <h2>\n        <a class=\"anchor\" href=\"#code-blocks:simple\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple code blocks\n      </h2>\n\n    <p id=\"code-blocks:simple:ac19fe50\">\n      The following <code>pre</code> code block is marked as one containing\n      JavaScript:\n    </p>\n\n    <pre data-plain-text=\"<pre data-language=&quot;js&quot;>api.schedule(function(done) {\n  performCalculations();\n  done();\n}, &quot;when-idle&quot;);</pre>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span> <span class=\"hljs-attr\">data-language</span>=<span class=\"hljs-string\">\"js\"</span>&gt;</span>api.schedule(function(done) {\n  performCalculations();\n  done();\n}, \"when-idle\");<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></code></pre>\n\n    <p id=\"code-blocks:simple:5bda77d2\">The block will be rendered as:</p>\n\n    <pre data-plain-text=\"api.schedule(function(done) {\n  performCalculations();\n  done();\n}, &quot;when-idle&quot;);\"><code data-language=\"js\">api.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) {\n  <span class=\"hljs-title function_\">performCalculations</span>();\n  <span class=\"hljs-title function_\">done</span>();\n}, <span class=\"hljs-string\">\"when-idle\"</span>);</code></pre>\n  </section>\n\n  <section id=\"code-blocks:figure\">\n    <h2>\n        <a class=\"anchor\" href=\"#code-blocks:figure\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Figure code blocks\n      </h2>\n\n    <p id=\"code-blocks:figure:22fcde51\">\n      To make a code block stand out more, you can enclose it in a\n      <code>figure</code> and provide a <code>figcaption</code>. The search\n      engine will index the caption and tag it as a code example in search\n      results.\n    </p>\n\n    <p id=\"code-blocks:figure:2f2da52c\">The following figure:</p>\n\n    <pre data-plain-text=\"<figure id=&quot;scheduling&quot;>\n  <pre data-language=&quot;js&quot;>api.schedule(function(done) {\n  performCalculations();\n  done();\n}, &quot;when-idle&quot;);</pre>\n  <figcaption>\n    Scheduling long-running calculations to run in background.\n  </figcaption>\n</figure>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figure</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"scheduling\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span> <span class=\"hljs-attr\">data-language</span>=<span class=\"hljs-string\">\"js\"</span>&gt;</span>api.schedule(function(done) {\n  performCalculations();\n  done();\n}, \"when-idle\");<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figcaption</span>&gt;</span>\n    Scheduling long-running calculations to run in background.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figcaption</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figure</span>&gt;</span></code></pre>\n  </section>\n\n  <p id=\"9430fffc\">will be rendered as:</p>\n\n  <figure id=\"scheduling-long-running-calculations\">\n    <pre data-plain-text=\"api.schedule(function(done) {\n  performCalculations();\n  done();\n}, &quot;when-idle&quot;);\"><code data-language=\"js\">api.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) {\n  <span class=\"hljs-title function_\">performCalculations</span>();\n  <span class=\"hljs-title function_\">done</span>();\n}, <span class=\"hljs-string\">\"when-idle\"</span>);</code></pre>\n    <figcaption>\n      Scheduling long-running calculations to run in background.\n    </figcaption>\n  </figure>\n\n  <p id=\"0a954ab0\">\n    Additionally, if you add an <code>id</code> attribute to your\n    <code>figure</code>, the figure will be available as a special entity in\n    search results. You can test this by typing <em>sched</em> in the search box\n    above.\n  </p>\n\n  <section id=\"code-blocks:embedding\">\n    <h2>\n        <a class=\"anchor\" href=\"#code-blocks:embedding\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Embedding external files\n      </h2>\n\n    <p id=\"code-blocks:embedding:d955f23d\">\n      Use the <code>embed</code> tag with the <code>src</code> attribute to\n      embed text from an external file:\n    </p>\n\n    <pre data-plain-text=\"<embed src=&quot;./examples/code.java&quot;>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./examples/code.java\"</span>&gt;</span></code></pre>\n\n    <p id=\"code-blocks:embedding:2fe81f02\">\n      API docs resolves the path to the embedded file relatively to the HTML file the\n      <code>embed</code> tag appears in.\n    </p>\n\n    <p id=\"code-blocks:embedding:1a5f68f7\">\n      When embedding fragments of real code, it may be useful to hide certain\n      lines. See the <a href=\"#code-blocks:annotations\">code annotations</a>\n      section for special comments you can use to achieve that.\n    </p>\n\n    <section id=\"code-blocks:embedding:fragments\">\n      <h3>\n        <a class=\"anchor\" href=\"#code-blocks:embedding:fragments\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selecting code fragments\n      </h3>\n\n      <p id=\"code-blocks:embedding:fragments:f1f322c9\">\n        In some cases you may want to embed only a fragment of an external file.\n        To do so, add special fragment start and end markers to the external\n        file along with a fragment identifier that you will later provide to the\n        <code>embed</code> tag.\n      </p>\n\n      <p id=\"code-blocks:embedding:fragments:eb7ba12e\">Fragment markers have the following syntax:</p>\n\n      <ul>\n        <li>\n          <p id=\"code-blocks:embedding:fragments:ca5595b1\">\n            <code>fragment-start{frag_id}</code>: start of the fragment with\n            identifier <code>frag_id</code>,\n          </p>\n        </li>\n        <li>\n          <p id=\"code-blocks:embedding:fragments:d3f84702\">\n            <code>fragment-end{frag_id}</code>: end of the fragment with\n            identifier <code>frag_id</code>.\n          </p>\n        </li>\n      </ul>\n\n      <p id=\"code-blocks:embedding:fragments:36e00e7d\">\n        You can place the markers in the comment sections specific to the\n        language you're embedding.\n      </p>\n\n      <figure id=\"code-blocks:embedding:fragment-markers\">\n        <pre data-plain-text=\"// fragment-start{replace}\nconst VARIABLE_WITH_DELIMITER_REGEX = /%(\\w+)%/g;\nexports.replaceVariables = (html, replacer) => {\n  return html.replace(VARIABLE_WITH_DELIMITER_REGEX,\n    (match, name, offset) => replacer(name, offset));\n};\n// fragment-end{replace}\n\n// fragment-start{validate}\nconst VARIABLE_REGEX = /^\\w+$/;\nexports.validateVariables = variables => {\n  // Validate variable names\n  const offending = Object.keys(variables).filter(v => !VARIABLE_REGEX.test(v));\n\n  if (offending.length > 0) {\n    throw &quot;Variable names must match [A-Za-z0-9_], offending names: &quot;\n      + offending.join(&quot;, &quot;) + &quot;.&quot;;\n  }\n};\n// fragment-end{validate}\n\nexports.createMapReplacer = map => {\n  return name => map[name];\n};\"><code data-language=\"js\"><mark><span class=\"hljs-comment\">// fragment-start{replace}</span></mark>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VARIABLE_WITH_DELIMITER_REGEX</span> = <span class=\"hljs-regexp\">/%(\\w+)%/g</span>;\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">replaceVariables</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">html, replacer</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> html.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-variable constant_\">VARIABLE_WITH_DELIMITER_REGEX</span>,\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">match, name, offset</span>) =&gt;</span> <span class=\"hljs-title function_\">replacer</span>(name, offset));\n};\n<mark><span class=\"hljs-comment\">// fragment-end{replace}</span></mark>\n\n<mark><span class=\"hljs-comment\">// fragment-start{validate}</span></mark>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VARIABLE_REGEX</span> = <span class=\"hljs-regexp\">/^\\w+$/</span>;\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">validateVariables</span> = <span class=\"hljs-function\"><span class=\"hljs-params\">variables</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// Validate variable names</span>\n  <span class=\"hljs-keyword\">const</span> offending = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(variables).<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> !<span class=\"hljs-variable constant_\">VARIABLE_REGEX</span>.<span class=\"hljs-title function_\">test</span>(v));\n\n  <span class=\"hljs-keyword\">if</span> (offending.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"Variable names must match [A-Za-z0-9_], offending names: \"</span>\n      + offending.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\", \"</span>) + <span class=\"hljs-string\">\".\"</span>;\n  }\n};\n<mark><span class=\"hljs-comment\">// fragment-end{validate}</span></mark>\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">createMapReplacer</span> = <span class=\"hljs-function\"><span class=\"hljs-params\">map</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> map[name];\n};</code></pre>\n\n        <figcaption>\n          Definition of two code fragments identified as\n          <code>replace</code> and <code>validate</code>.\n        </figcaption>\n      </figure>\n\n      <p id=\"code-blocks:embedding:fragments:48b8667a\">\n        When embedding the external file using the <code>pre</code> tag, specify\n        the identifier of the fragment to embed using the\n        <code>data-fragment</code> attribute:\n      </p>\n\n      <pre data-plain-text=\"<embed src=&quot;variables.js&quot; data-fragment=&quot;validate&quot;>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"variables.js\"</span> <span class=\"hljs-attr\">data-fragment</span>=<span class=\"hljs-string\">\"validate\"</span>&gt;</span></code></pre>\n\n      <p id=\"code-blocks:embedding:fragments:14740a47\">Please note the following issues when embedding fragments:</p>\n\n      <ul>\n        <li>\n          <p id=\"code-blocks:embedding:fragments:938a4ac7\">\n            One fragment can consist of multiple non-overlapping sections of\n            code. Just use the same fragment identifier in multiple start and\n            end markers.\n          </p>\n        </li>\n\n        <li>\n          <p id=\"code-blocks:embedding:fragments:a1108ed8\">\n            Lines containing fragment markers nested inside a fragment are\n            removed. This ensures that markers of nested fragments are not\n            transferred to your documentation.\n          </p>\n        </li>\n\n        <li>\n          <p id=\"code-blocks:embedding:fragments:35e8c117\">\n            You can use\n            <a href=\"#code-blocks:annotations\">highlighting annotations</a>\n            inside the fragments you embed.\n          </p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"code-blocks:embedding:jsonpaths\">\n      <h3>\n        <a class=\"anchor\" href=\"#code-blocks:embedding:jsonpaths\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Embedding JSON fragments via JSON paths\n      </h3>\n\n      <p id=\"code-blocks:embedding:jsonpaths:9fbfde4b\">\n        Embedding JSON files is a bit more problematic because the syntax\n        used to provide fragments (C-style comments) violates JSON specification.\n        To embed a subset of a JSON file, use <a href=\"https://github.com/dchester/jsonpath\">jsonpath</a>\n        to point at the nodes that should be included:\n      </p>\n\n      <pre data-plain-text=\"<embed src=&quot;input-file.json&quot; data-jsonpath=&quot;$.foo.bar&quot;>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"input-file.json\"</span> <span class=\"hljs-attr\">data-jsonpath</span>=<span class=\"hljs-string\">\"$.foo.bar\"</span>&gt;</span></code></pre>\n\n      <p id=\"code-blocks:embedding:jsonpaths:af5db7a7\">\n        When a subset of keys of an object pointed to by json path is needed,\n        use the non-standard syntax extension to enumerate those keys after the path: trailing\n        curly braces with a comma-delimited strings or regular expressions which enumerate\n        allowed keys. For example this block would include the object at <code>$.foo.bar</code>\n        but limit it to only the <code>baz</code>, <code>bar</code> or anything that\n        is prefixed with <code>prop</code> keys.\n      </p>\n\n      <pre data-plain-text=\"<embed src=&quot;input-file.json&quot; data-jsonpath=&quot;$.foo.bar{'baz', 'bar', /^prop.+/}&quot;>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"input-file.json\"</span> <span class=\"hljs-attr\">data-jsonpath</span>=<span class=\"hljs-string\">\"$.foo.bar{'baz', 'bar', /^prop.+/}\"</span>&gt;</span></code></pre>\n\n      <p id=\"code-blocks:embedding:jsonpaths:a3253c4f\">Please note the following:</p>\n\n      <ul>\n        <li>\n          <p id=\"code-blocks:embedding:jsonpaths:aa49ce94\">\n            An array of nodes returned for the provided json path is converted into\n            a sequence of <code>pre</code> blocks - each json path node corresponding to one\n            <code>pre</code> block.\n          </p>\n        </li>\n\n        <li>\n          <p id=\"code-blocks:embedding:jsonpaths:37311e0f\">\n            The JSON file is reformatted using the default\n            <code>JSON.stringify(..., null, \" \")</code> function. There is no way to\n            insert the file in its original formatting.\n          </p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"code-blocks:embedding:variables\">\n      <h3>\n        <a class=\"anchor\" href=\"#code-blocks:embedding:variables\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variables in file paths\n      </h3>\n\n      <p id=\"code-blocks:embedding:variables:822993a8\">\n        You can use <a href=\"/variable-substitution/\">variables</a> inside\n        the file paths you specify in the <code>src</code> attribute of\n        the <code>embed</code> tag. This may help to externalize paths of the\n        folders containing files to embed.\n      </p>\n\n      <p id=\"code-blocks:embedding:variables:8d5b28ae\">\n        Assuming that the <code>CODE_EXAMPLES</code> variable is defined to\n        contain the path to the directory with files to embed, you can reference\n        it like this:\n      </p>\n\n      <pre data-plain-text=\"<embed src=&quot;%​CODE_EXAMPLES%/api.js&quot;>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"%​CODE_EXAMPLES%/api.js\"</span>&gt;</span></code></pre>\n\n      <div class=\"warning\" id=\"code-blocks:embedding:variables:b52b5b82\">\n        <strong>Sanitize your variables.</strong>\n\n        <p id=\"code-blocks:embedding:variables:1ff40a9b\">\n          APIdocs does not verify the file paths you provide in the\n          <code>src</code>\n          attribute. Make sure they don't and can't reference any sensitive data\n          in your system.\n        </p>\n      </div>\n    </section>\n  </section>\n\n  <section id=\"code-blocks:annotations\">\n    <h2>\n        <a class=\"anchor\" href=\"#code-blocks:annotations\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code annotations\n      </h2>\n\n    <p id=\"code-blocks:annotations:eb3d160c\">\n      You can use special comments in both in-line and embedded code to\n      highlight and hide individual lines or ranges of lines.\n    </p>\n\n    <p id=\"code-blocks:annotations:4136bfca\">The following special comments are supported:</p>\n\n    <ul>\n      <li>\n        <p id=\"code-blocks:annotations:c9140bd7\"><code>highlight-line</code>: highlights the current line;</p>\n      </li>\n      <li>\n        <p id=\"code-blocks:annotations:2e67d3c1\">\n          <code>highlight-next-line</code>: highlights the next line, removes\n          the line containing the comment;\n        </p>\n      </li>\n      <li>\n        <p id=\"code-blocks:annotations:74cb4d37\">\n          <code>highlight-range{4-7}</code>: highlights lines 4–7, line 1\n          is the next line; removes the line containing the comment;\n        </p>\n      </li>\n\n      <li>\n        <p id=\"code-blocks:annotations:e6cce401\"><code>hide-line</code>: hides the current line,</p>\n      </li>\n\n      <li>\n        <p id=\"code-blocks:annotations:77d9e466\"><code>hide-next-line</code>: hides the next line,</p>\n      </li>\n\n      <li>\n        <p id=\"code-blocks:annotations:77e87d97\">\n          <code>hide-range{2-4}</code>: hides lines 2–4, line 1 is the\n          next line.\n        </p>\n      </li>\n    </ul>\n\n    <p id=\"code-blocks:annotations:2568d48a\">\n      Use comment syntax specific to the language to place annotation comments.\n      The following code comments:\n    </p>\n\n    <pre data-plain-text=\"<pre data-language=&quot;css&quot;>/** highlight​-range{5-7} */\np {\n  margin-top: 1rem; /** highlight​-line */\n}\n\nstrong {\n  font-weight: bold;\n}\n\narticle {\n  /** highlight​-next-line */\n  max-width: 40rem;\n}\n\n/** hide​-next-line */\n.hack { overflow: hidden; }\n/** hide​-range{1-4} */\n.bug {\n  display: none;\n}\n\n.warning { color: red }</pre>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span> <span class=\"hljs-attr\">data-language</span>=<span class=\"hljs-string\">\"css\"</span>&gt;</span>/** highlight​-range{5-7} */\np {\n  margin-top: 1rem; /** highlight​-line */\n}\n\nstrong {\n  font-weight: bold;\n}\n\narticle {\n  /** highlight​-next-line */\n  max-width: 40rem;\n}\n\n/** hide​-next-line */\n.hack { overflow: hidden; }\n/** hide​-range{1-4} */\n.bug {\n  display: none;\n}\n\n.warning { color: red }<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></code></pre>\n\n    <p id=\"code-blocks:annotations:a4a765f8\">produce the following code block:</p>\n\n    <pre data-plain-text=\"p {\n  margin-top: 1rem;\n}\n\nstrong {\n  font-weight: bold;\n}\n\narticle {\n  max-width: 40rem;\n}\n\n.warning { color: red }\"><code data-language=\"css\"><span class=\"hljs-selector-tag\">p</span> {\n<mark>  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">1rem</span>;</mark>\n}\n\n<mark><span class=\"hljs-selector-tag\">strong</span> {</mark>\n<mark>  <span class=\"hljs-attribute\">font-weight</span>: bold;</mark>\n<mark>}</mark>\n\n<span class=\"hljs-selector-tag\">article</span> {\n<mark>  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">40rem</span>;</mark>\n}\n\n<span class=\"hljs-selector-class\">.warning</span> { <span class=\"hljs-attribute\">color</span>: red }</code></pre>\n  </section>\n\n  <section id=\"common-indent-removal\">\n    <h2>\n        <a class=\"anchor\" href=\"#common-indent-removal\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common indent removal\n      </h2>\n\n    <p id=\"common-indent-removal:15df6708\">\n      APIdocs will by default remove the indentation that is common to all lines\n      of the included or embedded code block. This makes it easier to preserve\n      proper formatting of the documentation source code and the external source\n      code you embed.\n    </p>\n\n    <p id=\"common-indent-removal:4eb7b151\">\n      If for some reason you'd like to preserve the common indentation, set the\n      the <code>data-preserve-common-indent</code> attribute to\n      <code>true</code>:\n    </p>\n\n    <pre data-plain-text=\"<embed src=&quot;example.js&quot; data-preserve-common-indent=&quot;true&quot;>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example.js\"</span> <span class=\"hljs-attr\">data-preserve-common-indent</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span></code></pre>\n  </section>\n\n  <section id=\"leading-and-trailing-newline-removal\">\n    <h2>\n        <a class=\"anchor\" href=\"#leading-and-trailing-newline-removal\" aria-hidden=\"true\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New line removal\n      </h2>\n\n    <p id=\"leading-and-trailing-newline-removal:04282d43\">\n      APIdocs by default removes leading and trailing new lines of the code\n      block you embed. This strips unnecessary margins from the\n      <code>embed</code> blocks.\n    </p>\n\n    <p id=\"leading-and-trailing-newline-removal:00f0a438\">\n      To preserve leading and trailing new lines, set the the\n      <code>data-preserve-leading-and-trailing-newlines</code> attribute to\n      <code>true</code>:\n    </p>\n\n    <pre data-plain-text=\"<embed src=&quot;example.js&quot; data-preserve-leading-and-trailing-newlines=&quot;true&quot;>\"><code data-language=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example.js\"</span> <span class=\"hljs-attr\">data-preserve-leading-and-trailing-newlines</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span></code></pre>\n  </section>\n</article>","tableOfContents":[{"heading":"Simple code blocks","anchor":"code-blocks:simple"},{"heading":"Figure code blocks","anchor":"code-blocks:figure"},{"heading":"Embedding external files","anchor":"code-blocks:embedding","sections":[{"heading":"Selecting code fragments","anchor":"code-blocks:embedding:fragments"},{"heading":"Embedding JSON fragments via JSON paths","anchor":"code-blocks:embedding:jsonpaths"},{"heading":"Variables in file paths","anchor":"code-blocks:embedding:variables"}]},{"heading":"Code annotations","anchor":"code-blocks:annotations"},{"heading":"Common indent removal","anchor":"common-indent-removal"},{"heading":"New line removal","anchor":"leading-and-trailing-newline-removal"}]}},"pageContext":{"slug":"/code-blocks/"}},"staticQueryHashes":["2081922839"]}